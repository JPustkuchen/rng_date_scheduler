<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\rng_date_scheduler\EventDateAccess;

/**
 * Implements hook_entity_type_build().
 */
function rng_date_scheduler_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['event_type']->setFormClass('date_scheduler', 'Drupal\rng_date_scheduler\Form\EventTypeDateSchedulerForm');
}

/**
 * Implements hook_entity_create_access().
 */
function rng_date_scheduler_entity_create_access(AccountInterface $account, $context, $entity_bundle) {
  $event = NULL;
  if (isset($context['entity_type_id']) && $context['entity_type_id'] == 'registration') {
    if (isset($context['event'])) {
      $event = $context['event'];
    }
  }

  if ($event instanceof EntityInterface) {
    /** @var \Drupal\rng\EventManagerInterface $event_manager */
    $event_manager = \Drupal::service('rng.event_manager');
    $event_type = $event_manager->eventType($event->getEntityTypeId(), $event->bundle());

    $dates = rng_date_scheduler_get($event);

    if (!count($dates)) {
      $default_access = $event_type->getThirdPartySetting('rng_date_scheduler', 'default_access', 0);
      return AccessResult::forbiddenIf($default_access == -1)
        ->addCacheableDependency($event);
    }

    $now = DrupalDateTime::createFromTimestamp(\Drupal::request()->server->get('REQUEST_TIME'));

    $previous_after = NULL;
    foreach ($dates as $date) {
      $before = $date->canAccessBefore();
      $after = $date->canAccessBefore();

      if ($now < $date->getDate()) {
        return AccessResult::forbiddenIf(in_array(FALSE, [$previous_after, $before], TRUE))
          ->addCacheableDependency($event);
      }

      $previous_after = $after;
    }

    if ($previous_after) {
      return AccessResult::forbidden()
        ->addCacheableDependency($event);
    }
  }

  return AccessResult::neutral()
    ->addCacheableDependency($event);
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $event
 *
 * @return \Drupal\rng_date_scheduler\EventDateAccess[]
 */
function rng_date_scheduler_get(EntityInterface $event) {
  /** @var \Drupal\rng\EventManagerInterface $event_manager */
  $event_manager = \Drupal::service('rng.event_manager');
  $event_type = $event_manager->eventType($event->getEntityTypeId(), $event->bundle());

  $dates = [];
  foreach ($event_type->getThirdPartySetting('rng_date_scheduler', 'fields', []) as $field) {
    if (isset($field['field_name']) && !empty($field['status'])) {
      $field_name = $field['field_name'];

      /** @var \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $field_item_list */
      $field_item_list = $event->{$field_name};

      if (isset($field_item_list->date)) {
        /** @var DrupalDateTime $value */
        $value = $field_item_list->date;

        $date = new EventDateAccess();
        $date
          ->setFieldName($field_name)
          ->setDate($value)
          ->setAccessBefore($field['access']['before'] != -1)
          ->setAccessAfter($field['access']['after'] != -1);

        if ($field_item_list->getSetting('datetime_type') == 'date') {
          $during = $field['access']['during'] != -1;

          $date2 = clone $date;

          $value->setTime(0, 0, 0);
          $dates[] = $date->setDate($value)
            ->setAccessAfter($during);

          $value2 = clone $value;
          $value2->modify('+1 day');
          $dates[] = $date2->setDate($value2)
            ->setAccessBefore($during);
        }
        else {
          $dates[] = $date;
        }
      }
    }
  }

  // Sort dates ascending.
  usort($dates, function($a, $b) {
    /** @var \Drupal\rng_date_scheduler\EventDateAccess $a */
    /** @var \Drupal\rng_date_scheduler\EventDateAccess $b */
    if ($a->getDate() == $b->getDate()) {
      return 0;
    }
    else {
      return $a->getDate() < $b->getDate() ? -1 : 1;
    }
  });

  return $dates;
}
